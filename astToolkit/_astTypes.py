"""This file is generated automatically, so changes to this file will be lost."""
from typing import Any, TypeAlias as typing_TypeAlias
import ast
import sys
intORstr: typing_TypeAlias = Any
intORstrORtype_params: typing_TypeAlias = Any
intORtype_params: typing_TypeAlias = Any
yourPythonIsOld: typing_TypeAlias = Any
hasDOTargtypes: typing_TypeAlias = ast.FunctionType
hasDOTasname: typing_TypeAlias = ast.alias
hasDOTattr: typing_TypeAlias = ast.Attribute
hasDOTbases: typing_TypeAlias = ast.ClassDef
if sys.version_info >= (3, 12):
    hasDOTbound: typing_TypeAlias = ast.TypeVar
hasDOTcases: typing_TypeAlias = ast.Match
hasDOTcause: typing_TypeAlias = ast.Raise
hasDOTcls: typing_TypeAlias = ast.MatchClass
hasDOTcomparators: typing_TypeAlias = ast.Compare
hasDOTcontext_expr: typing_TypeAlias = ast.withitem
hasDOTconversion: typing_TypeAlias = ast.FormattedValue
hasDOTctx: typing_TypeAlias = ast.Attribute | ast.List | ast.Name | ast.Starred | ast.Subscript | ast.Tuple
hasDOTdecorator_list: typing_TypeAlias = ast.AsyncFunctionDef | ast.ClassDef | ast.FunctionDef
if sys.version_info >= (3, 13):
    hasDOTdefault_value: typing_TypeAlias = ast.ParamSpec | ast.TypeVar | ast.TypeVarTuple
hasDOTdefaults: typing_TypeAlias = ast.arguments
hasDOTelt: typing_TypeAlias = ast.GeneratorExp | ast.ListComp | ast.SetComp
hasDOTelts: typing_TypeAlias = ast.List | ast.Set | ast.Tuple
hasDOTexc: typing_TypeAlias = ast.Raise
hasDOTformat_spec: typing_TypeAlias = ast.FormattedValue
hasDOTfunc: typing_TypeAlias = ast.Call
hasDOTgenerators: typing_TypeAlias = ast.DictComp | ast.GeneratorExp | ast.ListComp | ast.SetComp
hasDOTguard: typing_TypeAlias = ast.match_case
hasDOTid: typing_TypeAlias = ast.Name
hasDOTifs: typing_TypeAlias = ast.comprehension
hasDOTis_async: typing_TypeAlias = ast.comprehension
hasDOTitems: typing_TypeAlias = ast.AsyncWith | ast.With
hasDOTiter: typing_TypeAlias = ast.AsyncFor | ast.comprehension | ast.For
hasDOTkey: typing_TypeAlias = ast.DictComp
hasDOTkeywords: typing_TypeAlias = ast.Call | ast.ClassDef
hasDOTkind: typing_TypeAlias = ast.Constant
hasDOTkw_defaults: typing_TypeAlias = ast.arguments
hasDOTkwarg: typing_TypeAlias = ast.arguments
hasDOTkwd_attrs: typing_TypeAlias = ast.MatchClass
hasDOTkwd_patterns: typing_TypeAlias = ast.MatchClass
hasDOTkwonlyargs: typing_TypeAlias = ast.arguments
hasDOTleft: typing_TypeAlias = ast.BinOp | ast.Compare
hasDOTlevel: typing_TypeAlias = ast.ImportFrom
hasDOTlineno: typing_TypeAlias = ast.TypeIgnore
hasDOTlower: typing_TypeAlias = ast.Slice
hasDOTmodule: typing_TypeAlias = ast.ImportFrom
hasDOTmsg: typing_TypeAlias = ast.Assert
hasDOToperand: typing_TypeAlias = ast.UnaryOp
hasDOTops: typing_TypeAlias = ast.Compare
hasDOToptional_vars: typing_TypeAlias = ast.withitem
hasDOTpatterns: typing_TypeAlias = ast.MatchClass | ast.MatchMapping | ast.MatchOr | ast.MatchSequence
hasDOTposonlyargs: typing_TypeAlias = ast.arguments
hasDOTrest: typing_TypeAlias = ast.MatchMapping
hasDOTright: typing_TypeAlias = ast.BinOp
hasDOTsimple: typing_TypeAlias = ast.AnnAssign
hasDOTslice: typing_TypeAlias = ast.Subscript
hasDOTstep: typing_TypeAlias = ast.Slice
hasDOTsubject: typing_TypeAlias = ast.Match
hasDOTtag: typing_TypeAlias = ast.TypeIgnore
hasDOTtargets: typing_TypeAlias = ast.Assign | ast.Delete
hasDOTtest: typing_TypeAlias = ast.Assert | ast.If | ast.IfExp | ast.While
hasDOTtype: typing_TypeAlias = ast.ExceptHandler
hasDOTtype_comment: typing_TypeAlias = ast.arg | ast.Assign | ast.AsyncFor | ast.AsyncFunctionDef | ast.AsyncWith | ast.For | ast.FunctionDef | ast.With
hasDOTtype_ignores: typing_TypeAlias = ast.Module
if sys.version_info >= (3, 12):
    hasDOTtype_params: typing_TypeAlias = ast.AsyncFunctionDef | ast.ClassDef | ast.FunctionDef | ast.TypeAlias
hasDOTupper: typing_TypeAlias = ast.Slice
hasDOTvalues: typing_TypeAlias = ast.BoolOp | ast.Dict | ast.JoinedStr
hasDOTvararg: typing_TypeAlias = ast.arguments