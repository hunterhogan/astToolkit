import ast
from typing import Any, overload

class Find:
    def __init__(self, listPathSteps: list[tuple[str, Any]] | None = None) -> None: ...
    def matches(self, nodeTarget: ast.AST) -> bool: ...
    def __call__(self, nodeTarget: ast.AST) -> bool: ...

    def equal(self, valueTarget: Any) -> 'Find': ...
    def at(self, indexTarget: int) -> 'Find': ...

    def AST(self) -> 'Find': ...
    def Add(self) -> 'Find': ...
    def And(self) -> 'Find': ...
    def AnnAssign(self) -> 'Find': ...
    def Assert(self) -> 'Find': ...
    def Assign(self) -> 'Find': ...
    def AsyncFor(self) -> 'Find': ...
    def AsyncFunctionDef(self) -> 'Find': ...
    def AsyncWith(self) -> 'Find': ...
    def Attribute(self) -> 'Find': ...
    def AugAssign(self) -> 'Find': ...
    def AugLoad(self) -> 'Find': ...
    def AugStore(self) -> 'Find': ...
    def Await(self) -> 'Find': ...
    def BinOp(self) -> 'Find': ...
    def BitAnd(self) -> 'Find': ...
    def BitOr(self) -> 'Find': ...
    def BitXor(self) -> 'Find': ...
    def BoolOp(self) -> 'Find': ...
    def Break(self) -> 'Find': ...
    def Call(self) -> 'Find': ...
    def ClassDef(self) -> 'Find': ...
    def Compare(self) -> 'Find': ...
    def Constant(self) -> 'Find': ...
    def Continue(self) -> 'Find': ...
    def Del(self) -> 'Find': ...
    def Delete(self) -> 'Find': ...
    def Dict(self) -> 'Find': ...
    def DictComp(self) -> 'Find': ...
    def Div(self) -> 'Find': ...
    def Eq(self) -> 'Find': ...
    def ExceptHandler(self) -> 'Find': ...
    def Expr(self) -> 'Find': ...
    def Expression(self) -> 'Find': ...
    def ExtSlice(self) -> 'Find': ...
    def FloorDiv(self) -> 'Find': ...
    def For(self) -> 'Find': ...
    def FormattedValue(self) -> 'Find': ...
    def FunctionDef(self) -> 'Find': ...
    def FunctionType(self) -> 'Find': ...
    def GeneratorExp(self) -> 'Find': ...
    def Global(self) -> 'Find': ...
    def Gt(self) -> 'Find': ...
    def GtE(self) -> 'Find': ...
    def If(self) -> 'Find': ...
    def IfExp(self) -> 'Find': ...
    def Import(self) -> 'Find': ...
    def ImportFrom(self) -> 'Find': ...
    def In(self) -> 'Find': ...
    def Index(self) -> 'Find': ...
    def Interactive(self) -> 'Find': ...
    def Invert(self) -> 'Find': ...
    def Is(self) -> 'Find': ...
    def IsNot(self) -> 'Find': ...
    def JoinedStr(self) -> 'Find': ...
    def LShift(self) -> 'Find': ...
    def Lambda(self) -> 'Find': ...
    def List(self) -> 'Find': ...
    def ListComp(self) -> 'Find': ...
    def Load(self) -> 'Find': ...
    def Lt(self) -> 'Find': ...
    def LtE(self) -> 'Find': ...
    def MatMult(self) -> 'Find': ...
    def Match(self) -> 'Find': ...
    def MatchAs(self) -> 'Find': ...
    def MatchClass(self) -> 'Find': ...
    def MatchMapping(self) -> 'Find': ...
    def MatchOr(self) -> 'Find': ...
    def MatchSequence(self) -> 'Find': ...
    def MatchSingleton(self) -> 'Find': ...
    def MatchStar(self) -> 'Find': ...
    def MatchValue(self) -> 'Find': ...
    def Mod(self) -> 'Find': ...
    def Module(self) -> 'Find': ...
    def Mult(self) -> 'Find': ...
    def Name(self) -> 'Find': ...
    def NamedExpr(self) -> 'Find': ...
    def Nonlocal(self) -> 'Find': ...
    def Not(self) -> 'Find': ...
    def NotEq(self) -> 'Find': ...
    def NotIn(self) -> 'Find': ...
    def Or(self) -> 'Find': ...
    def Param(self) -> 'Find': ...
    def ParamSpec(self) -> 'Find': ...
    def Pass(self) -> 'Find': ...
    def Pow(self) -> 'Find': ...
    def RShift(self) -> 'Find': ...
    def Raise(self) -> 'Find': ...
    def Return(self) -> 'Find': ...
    def Set(self) -> 'Find': ...
    def SetComp(self) -> 'Find': ...
    def Slice(self) -> 'Find': ...
    def Starred(self) -> 'Find': ...
    def Store(self) -> 'Find': ...
    def Sub(self) -> 'Find': ...
    def Subscript(self) -> 'Find': ...
    def Suite(self) -> 'Find': ...
    def Try(self) -> 'Find': ...
    def TryStar(self) -> 'Find': ...
    def Tuple(self) -> 'Find': ...
    def TypeAlias(self) -> 'Find': ...
    def TypeIgnore(self) -> 'Find': ...
    def TypeVar(self) -> 'Find': ...
    def TypeVarTuple(self) -> 'Find': ...
    def UAdd(self) -> 'Find': ...
    def USub(self) -> 'Find': ...
    def UnaryOp(self) -> 'Find': ...
    def While(self) -> 'Find': ...
    def With(self) -> 'Find': ...
    def Yield(self) -> 'Find': ...
    def YieldFrom(self) -> 'Find': ...
    def _ast_Ellipsis(self) -> 'Find': ...
    def alias(self) -> 'Find': ...
    def annotation(self) -> 'Find': ...
    def arg(self) -> 'Find': ...
    def args(self) -> 'Find': ...
    def argtypes(self) -> 'Find': ...
    def arguments(self) -> 'Find': ...
    def asname(self) -> 'Find': ...
    def attr(self) -> 'Find': ...
    def bases(self) -> 'Find': ...
    def body(self) -> 'Find': ...
    def boolop(self) -> 'Find': ...
    def bound(self) -> 'Find': ...
    def cases(self) -> 'Find': ...
    def cause(self) -> 'Find': ...
    def cls(self) -> 'Find': ...
    def cmpop(self) -> 'Find': ...
    def comparators(self) -> 'Find': ...
    def comprehension(self) -> 'Find': ...
    def context_expr(self) -> 'Find': ...
    def conversion(self) -> 'Find': ...
    def ctx(self) -> 'Find': ...
    def decorator_list(self) -> 'Find': ...
    def default_value(self) -> 'Find': ...
    def defaults(self) -> 'Find': ...
    def elt(self) -> 'Find': ...
    def elts(self) -> 'Find': ...
    def exc(self) -> 'Find': ...
    def excepthandler(self) -> 'Find': ...
    def expr(self) -> 'Find': ...
    def expr_context(self) -> 'Find': ...
    def finalbody(self) -> 'Find': ...
    def format_spec(self) -> 'Find': ...
    def func(self) -> 'Find': ...
    def generators(self) -> 'Find': ...
    def guard(self) -> 'Find': ...
    def handlers(self) -> 'Find': ...
    def id(self) -> 'Find': ...
    def ifs(self) -> 'Find': ...
    def is_async(self) -> 'Find': ...
    def items(self) -> 'Find': ...
    def iter(self) -> 'Find': ...
    def key(self) -> 'Find': ...
    def keys(self) -> 'Find': ...
    def keyword(self) -> 'Find': ...
    def keywords(self) -> 'Find': ...
    def kind(self) -> 'Find': ...
    def kw_defaults(self) -> 'Find': ...
    def kwarg(self) -> 'Find': ...
    def kwd_attrs(self) -> 'Find': ...
    def kwd_patterns(self) -> 'Find': ...
    def kwonlyargs(self) -> 'Find': ...
    def left(self) -> 'Find': ...
    def level(self) -> 'Find': ...
    def lineno(self) -> 'Find': ...
    def lower(self) -> 'Find': ...
    def match_case(self) -> 'Find': ...
    def mod(self) -> 'Find': ...
    def module(self) -> 'Find': ...
    def msg(self) -> 'Find': ...
    def name(self) -> 'Find': ...
    def names(self) -> 'Find': ...
    def op(self) -> 'Find': ...
    def operand(self) -> 'Find': ...
    def operator(self) -> 'Find': ...
    def ops(self) -> 'Find': ...
    def optional_vars(self) -> 'Find': ...
    def orelse(self) -> 'Find': ...
    def pattern(self) -> 'Find': ...
    def patterns(self) -> 'Find': ...
    def posonlyargs(self) -> 'Find': ...
    def rest(self) -> 'Find': ...
    def returns(self) -> 'Find': ...
    def right(self) -> 'Find': ...
    def simple(self) -> 'Find': ...
    def slice(self) -> 'Find': ...
    def step(self) -> 'Find': ...
    def stmt(self) -> 'Find': ...
    def subject(self) -> 'Find': ...
    def tag(self) -> 'Find': ...
    def target(self) -> 'Find': ...
    def targets(self) -> 'Find': ...
    def test(self) -> 'Find': ...
    def type(self) -> 'Find': ...
    def type_comment(self) -> 'Find': ...
    def type_ignore(self) -> 'Find': ...
    def type_ignores(self) -> 'Find': ...
    def type_param(self) -> 'Find': ...
    def type_params(self) -> 'Find': ...
    def unaryop(self) -> 'Find': ...
    def upper(self) -> 'Find': ...
    def value(self) -> 'Find': ...
    def values(self) -> 'Find': ...
    def vararg(self) -> 'Find': ...
    def withitem(self) -> 'Find': ...

    def __getattribute__(self, attributeIdentifier: str) -> Any: ...
